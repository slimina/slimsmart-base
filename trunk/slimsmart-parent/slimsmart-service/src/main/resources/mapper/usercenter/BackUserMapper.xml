<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.slimsmart.model.usercenter.BackUser" >
  <resultMap id="BaseResultMap" type="com.slimsmart.model.usercenter.BackUser" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="login_name" property="loginName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, login_name, password, status, name, phone, email, remark, create_date
  </sql>
   
  <select id="get" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tb_back_user
    where id = #{id,jdbcType=VARCHAR}
  </select>
   <select id="getBackUserByLoginName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tb_back_user
    where login_name = #{loginName,jdbcType=VARCHAR}
  </select>
  
  <delete id="delete" parameterType="java.lang.String" >
    delete from tb_back_user
    where id = #{id,jdbcType=VARCHAR}
  </delete>

  <insert id="insert" parameterType="com.slimsmart.model.usercenter.BackUser" >
    insert into tb_back_user (id, login_name, password, 
      status, name, phone, email, 
      remark, create_date)
    values (#{id,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{status,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP})
  </insert>
  
   <sql id="selectWhereClause">
   		<if test="loginName!=null">
   			and t.login_name like concat('%',#{loginName,jdbcType=VARCHAR},'%')
   		</if>
   		<if test="name!=null">
   			and t.name like concat('%',#{name,jdbcType=VARCHAR},'%')
   		</if>
   		<if test="phone!=null">
   			and t.phone like concat('%',#{phone,jdbcType=VARCHAR},'%')
   		</if>
   		<if test="status!=null">
   			and t.status = #{status,jdbcType=VARCHAR}
   		</if>
   </sql>

  <select id="count" resultType="long" parameterType="map">
    select count(*) from tb_back_user t
    <where>
    	<include refid="selectWhereClause" />
    </where>
  </select>
  
  <select id="isExistsLoginName" parameterType="string" resultType="long">
  	select count(1) from tb_back_user t where t.login_name =#{loginName,jdbcType=VARCHAR}
  </select>
  
  <select id="findPage" resultMap="BaseResultMap" parameterType="map">
    select 
     <include refid="Base_Column_List" />,
    (select a.name from tb_role a LEFT JOIN tr_user_role r on r.role_id = a.id  where r.user_id = t.id ) role_name 
    from tb_back_user t
    <where>
    	<include refid="selectWhereClause" />
    </where>
    order by t.create_date desc
  </select>
  
  <update id="update" parameterType="com.slimsmart.model.usercenter.BackUser" >
    update tb_back_user
    <set >
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <!-- 用户角色绑定关系 -->
  <insert id="insertBindRole" parameterType="map">
  	insert into tr_user_role (id, user_id, role_id)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR})
  </insert>
  <update id="updateBindRole" parameterType="map">
  	update tr_user_role set role_id = #{roleId,jdbcType=VARCHAR} where user_id = #{userId,jdbcType=VARCHAR}
  </update>
  <delete id="deleteBindRole" parameterType="string">
  	delete from tr_user_role where user_id = #{userId,jdbcType=VARCHAR}
  </delete>
  <select id="getBindRoleId" parameterType="string" resultType="string">
    select role_id from tr_user_role where user_id = #{userId,jdbcType=VARCHAR}
  </select>
</mapper>